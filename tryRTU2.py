# ------ Import necessary packages ----
#import networkx as nx
#from collections import defaultdict
#from itertools import combinations
#import math
from dwave.system.samplers import DWaveSampler
from dwave.system.composites import EmbeddingComposite

sampler_auto = EmbeddingComposite(DWaveSampler(solver={'topology__type': 'chimera'}))

# Set Q matrix
linear = {('q1','q1'):298.748, ('q2','q2'):298.748, ('q3','q3'):257.369, ('q4','q4'):257.169, ('q5','q5'):254.929, ('q6','q6'):254.863, 
        ...('q7','q7'):250.576, ('q8','q8'):250.576, ('w1','w1'):-0.199662, ('w2','w2'):-0.0665539, 
        ...('w3','w3'):-0.0665539, ('w4','w4'):-0.0665539, ('w5','w5'):-0.0665539, ('w6','w6'):-0.0665539, 
        ...('w7','w7'):-0.0665539, ('w8','w8'):-0.0998308, ('w9','w9'):-0.0332769, ('w10','w10'):-0.0332769, 
        ...('w11','w11'):-0.0332769, ('w12','w12'):-0.0332769, ('w13','w13'):-0.0332769, ('w14','w14'):-0.0332769, 
        ...('w15','w15'):-0.0998309, ('w16','w16'):-0.033277, ('w17','w17'):-0.033277, ('w18','w18'):-0.033277, 
        ...('w19','w19'):-0.033277, ('w20','w20'):-0.033277, ('w21','w21'):-0.033277, ('w22','w22'):0.199662, 
        ...('w23','w23'):0.199662, ('w24','w24'):0.199662, ('w25','w25'):0.199662, ('w26','w26'):0.0998308, 
        ...('w27','w27'):0.0998309, ('w28','w28'):0.0998308, ('w29','w29'):0.0998309, ('w30','w30'):0.0998308, 
        ...('w31','w31'):0.0998308, ('w32','w32'):0.0998309, ('w33','w33'):0.0998309}

quadratic = {('q1','q2'):1401.99, ('q1','q3'):0.2163, ('q1','q4'):0.282854, ('q1','q5'):0.10815, ('q1','q6'):0.141427, 
        ...('q1','w1'):0.0665539, ('q1','w2'):0.0665539, ('q1','w5'):0.0665539, ('q1','w6'):0.0665539, 
        ...('q1','w8'):0.0332769, ('q1','w9'):0.0332769, ('q1','w12'):0.0332769, ('q1','w13'):0.0332769, 
        ...('q1','w22'):-0.0998308, ('q1','w23'):-0.0998308, ('q1','w24'):-0.0998308, ('q1','w26'):-0.0499154, 
        ...('q1','w28'):-0.0499154, ('q1','w30'):-0.0499154, ('q2','q3'):0.2163, ('q2','q4'):0.282854, ('q2','q5'):0.10815, 
        ...('q2','q6'):0.141427, ('q2','w1'):0.0665539, ('q2','w3'):0.0665539, ('q2','w5'):0.0665539, 
        ...('q2','w7'):0.0665539, ('q2','w8'):0.0332769, ('q2','w10'):0.0332769, ('q2','w12'):0.0332769, 
        ...('q2','w14'):0.0332769, ('q2','w22'):-0.0998308, ('q2','w23'):-0.0998308, ('q2','w25'):-0.0998308, 
        ...('q2','w26'):-0.0499154, ('q2','w28'):-0.0499154, ('q2','w31'):-0.0499154, ('q3','q4'):1429.66, 
        ...('q3','q5'):0.10815, ('q3','q6'):0.10815, ('q3','w1'):0.0665539, ('q3','w4'):0.0665539, 
        ...('q3','w6'):0.0665539, ('q3','w7'):0.0665539, ('q3','w15'):0.033277, ('q3','w18'):0.033277, 
        ...('q3','w20'):0.033277, ('q3','w21'):0.033277, ('q3','w22'):-0.0998308, ('q3','w24'):-0.0998308, 
        ...('q3','w25'):-0.0998308, ('q3','w27'):-0.0499155, ('q3','w29'):-0.0499155, ('q3','w32'):-0.0499155, 
        ...('q4','q5'):0.141427, ('q4','q6'):0.141427, ('q4','w1'):0.133108, ('q4','w2'):0.0665539, 
        ...('q4','w3'):0.0665539, ('q4','w4'):0.0665539, ('q4','w5'):0.0665539, ('q4','w6'):0.0665539, 
        ...('q4','w7'):0.0665539, ('q4','w15'):0.0665539, ('q4','w16'):0.033277, ('q4','w17'):0.033277, 
        ...('q4','w18'):0.033277, ('q4','w19'):0.033277, ('q4','w20'):0.033277, ('q4','w21'):0.033277, 
        ...('q4','w23'):-0.0998308, ('q4','w24'):-0.0998308, ('q4','w25'):-0.0998308, ('q4','w27'):-0.0499155, 
        ...('q4','w29'):-0.0499155, ('q4','w33'):-0.0499155, ('q5','q6'):1516.89, ('q5','w8'):0.0332769, 
        ...('q5','w11'):0.0332769, ('q5','w13'):0.0332769, ('q5','w14'):0.0332769, ('q5','w15'):0.033277, 
        ...('q5','w16'):0.033277, ('q5','w19'):0.033277, ('q5','w20'):0.033277, ('q5','w26'):-0.0499154, 
        ...('q5','w27'):-0.0499155, ('q5','w30'):-0.0499154, ('q5','w31'):-0.0499154, ('q5','w32'):-0.0499155, 
        ...('q5','w33'):-0.0499155, ('q6','w8'):0.0665539, ('q6','w9'):0.0332769, ('q6','w10'):0.0332769, 
        ...('q6','w11'):0.0332769, ('q6','w12'):0.0332769, ('q6','w13'):0.0332769, ('q6','w14'):0.0332769, 
        ...('q6','w15'):0.033277, ('q6','w17'):0.033277, ('q6','w19'):0.033277, ('q6','w21'):0.033277, 
        ...('q6','w28'):-0.0499154, ('q6','w29'):-0.0499155, ('q6','w30'):-0.0499154, ('q6','w31'):-0.0499154, 
        ...('q6','w32'):-0.0499155, ('q6','w33'):-0.0499155, ('q7','q8'):1599.67, ('w1','w2'):0.0665539, 
        ...('w1','w3'):0.0665539, ('w1','w4'):0.0665539, ('w8','w9'):0.0332769, ('w8','w10'):0.0332769, 
        ...('w8','w11'):0.0332769, ('w15','w16'):0.033277, ('w15','w17'):0.033277, ('w15','w18'):0.033277}

Q = {**linear, **quadratic}

#Run QUBO on QPU
sampleset = sampler_auto.sample_qubo(Q,
                                    num_reads=1000,
                                    label='RTU optimization')

print(sampleset)

